from files import donut
import pandas as pd
import altair as alt
import streamlit as st


def show(df, selected_colors):
    # Calculate regional exposure metrics
    colour1 = [selected_colors[3], selected_colors[5]]
    colour2 = [selected_colors[2], selected_colors[4]]

    total_builds = df.shape[0]
    regions = df['region'].unique()
    region_data = {region: df[df['region'] == region] for region in regions}
    region_metrics = {}

    for region, data in region_data.items():
        if data.shape[0]:
            region_metrics[region] = {
                'exposure': (data.shape[0] / total_builds) * 100,
                #'success_rate': (data[data['status'] == 'Success'].shape[0] / data.shape[0]) * 100,
                'unique_projects': data['projname'].nunique()
            }

    # Setting up Streamlit columns for visualization
    inners = st.columns(2)

    # Loop through each region and display metrics
    for region in (df['region'].unique()):
        with inners[0]:
            st.markdown(f'##### {region} Exposure')
            st.altair_chart(donut.make_donut(round(region_metrics[region]['exposure']), 'Build Exposure', colour1))
        with inners[1]:
            st.markdown(f'##### {region} Unique Projects')
            st.altair_chart(donut.make_donut(round(region_metrics[region]['unique_projects']), 'unique_projects', colour2, False))

# Assuming df is already loaded and cleaned before passing to show function
# Example usage:
# df = pd.read_csv('your_data.csv')
# show(df)

def calculate_metrics(total_df, filtered_df):
    # Number of Builds
    number_of_builds = filtered_df.shape[0]

    # Unique Projects
    total_projects = total_df['projname'].nunique()
    filtered_projects = filtered_df['projname'].nunique()
    new_projects = filtered_projects - total_df[total_df['projname'].isin(filtered_df['projname'])]['projname'].nunique()

    # Total Developers
    total_developers = filtered_df['user_id'].nunique()

    # New Developers
    total_dev_ids = set(total_df['user_id'])
    filtered_dev_ids = set(filtered_df['user_id'])
    new_developers = len(filtered_dev_ids - total_dev_ids)

    return {
        "number_of_builds": number_of_builds,
        "new_projects": new_projects,
        "total_developers": total_developers,
        "new_developers": new_developers
    }
